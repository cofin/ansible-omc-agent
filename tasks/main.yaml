---
# This role conains tasks to deploy the Oracle Management Cloud Agent on Linux x86-64 machines

- name: Check for cloud agent files.
  local_action: stat path="{{ playbook_dir }}/files/cloudagent_linux.x64_{{ omc_agent_version }}.zip"
  become: false
  register: ls_omc_cloudagent_image
  failed_when: not ls_omc_cloudagent_image.stat.exists

- name: creating temporary directory
  file:
    path: "{{ omc_agent_tmp_install_dir }}"
    state: directory
    owner: "{{ omc_agent_user }}"
    group: "{{ omc_agent_group }}"

- name: Installing dependencies
  yum:
    name: "{{ omc_agent_yum_packages }}"
    state: present
  when: install_os_packages and ansible_os_family == 'RedHat'

- name: Creating OMC cloudagent group
  group:
    name: "{{ omc_agent_group }}"
    gid: "{{ omc_agent_gid }}"
    state: present

- name: Creating OMC cloudagent user
  user:
    name: "{{ omc_agent_user }}"
    group: "{{ omc_agent_group }}"
    uid: "{{ omc_agent_uid }}"
    state: present

- name: Configure ulimits for OMC user
  pam_limits:
    domain: "{{ omc_agent_user }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{item.value}}"
  with_items:
    - { limit_type: '-', limit_item: 'nofile', value: 400000 }
    - { limit_type: '-', limit_item: 'nproc', value: 400000 }
    - { limit_type: 'soft', limit_item: 'memlock', value: unlimited }
    - { limit_type: 'hard', limit_item: 'memlock', value: unlimited }
  register: user_limits

- name: Reload settings & limits from config file
  shell: sysctl --system
  when: user_limits.changed

- name: Check for an existing installation of OMC cloud agent
  stat:
    path: "{{ omc_agent_base_dir }}/agent_inst/bin/omcli"
  register: existing_omc_install

- name: Creating base directory
  file:
    path: "{{ omc_agent_base_dir }}"
    state: directory
    owner: "{{ omc_agent_user }}"
    group: "{{ omc_agent_group }}"
  when: existing_omc_install.stat.exists == False

- name: uploading omc cloudagent installer
  unarchive:
    src: "files/cloudagent_linux.x64_{{ omc_agent_version }}.zip"
    dest: "{{ omc_agent_tmp_install_dir }}"
  when: existing_omc_install.stat.exists == False

- name: copy agent response files
  template:
    src: "{{ role_path }}/templates/agent.rsp.j2"
    dest: "{{ omc_agent_tmp_install_dir }}/agent.rsp"
    owner: "{{ omc_agent_user }}"
    group: "{{ omc_agent_group }}"
    mode: 0644
  when: existing_omc_install.stat.exists == False

- name: installing omc cloudagent
  shell: sh ./AgentInstall.sh
  args:
    chdir: "{{ omc_agent_tmp_install_dir }}"
  become: yes
  become_user: "{{ omc_agent_user }}"
  when: existing_omc_install.stat.exists == False

- name: executing root.sh configuration script
  shell: "{{ omc_agent_base_dir }}/core/{{ omc_agent_version }}/root.sh"
  when: existing_omc_install.stat.exists == False

- name: Copy templated initialization script
  template:
    src: "{{ role_path }}/templates/init.omc-agent.j2"
    dest: /etc/init.d/omc-agent
    owner: root
    group: root
    mode: 0740

# TO DO: check for daemon module
- name: set script to start at boot
  shell: "chkconfig --add omc-agent && chkconfig --level 2345 omc-agent on"
  become: yes
  become_user: root



# TO DO: this should be handled better.  rewrite this.
- name: setting agent permissions
  shell: "{{ item }}"
  with_items: "{{ omc_agent_permissions }}"
  become: yes
  become_user: root

# TO DO: make sure that the daemon is running
- name: set script to start at boot
  shell: "/etc/init.d/omc-agent start"
  become: yes
  become_user: root
  ignore_errors: yes

- name: removing omc cloudagent installer
  file:
    path: "{{ omc_agent_tmp_install_dir }}"
    state: absent
